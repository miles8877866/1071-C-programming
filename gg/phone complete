#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

struct ListNode
{
    int id;
    char *name;
    int num;
    ListNode *nextPtr;
};

typedef ListNode *ListNodePtr;


void insert( ListNodePtr *sPtr, ListNode item );
int del( ListNodePtr *sPtr, ListNode item );
int isEmpty( ListNodePtr sPtr );
void printList( ListNodePtr currentPtr );
void instructions( void );

int main( void )
{
    ListNodePtr startPtr = NULL;
    int choice;
    ListNode item;
    char *s;


    instructions();
    printf( "oh? " );
    scanf( "%d", &choice );



    while ( choice != 4 )
    {
        s = (char *)malloc(sizeof(char)*80);
        switch ( choice )
        {
        case 1:
            printf( "Enter a id: " );
            scanf( "%d", &item );
            printf("Enter name: ");
            getchar();
            gets(s);
            strcpy(item.name,s);
            printf("Enter the phonenumber: ");
            scanf("%d",&item.num);

            insert( &startPtr, item );

            break;
        case 2:

            if ( !isEmpty( startPtr ) )
            {
                printf( "Enter id to be deleted: " );
                scanf( "\n%d", &item );

                 if ( del( &startPtr, item ) )
                {
                    printf( "%d deleted.\n", item.id );
                    printList( startPtr );
                }
                else
                {
                    printf( "%d not found.\n\n", item.id);
                }
            }
            else
            {
                printf( "List is empty.\n\n" );
            }

            break;
        case 3:
            printList( startPtr );
            break;
        case 4:
            break;
        default:
            printf( "Invalid choice.\n\n" );
            instructions();
            break;
        }

        printf( "oh? " );
        scanf( "%d", &choice );
    }

    printf( "End of run.\n" );
    return 0;
}


void instructions( void )
{
    printf( "Enter your choice:\n"
            "   1 to insert an element into the list.\n"
            "   2 to delete an element from the list.\n"
            "   3 to show list.\n"
            "   4 to end.\n");
}
void insert( ListNode **sPtr, ListNode item )
{
    ListNodePtr newPtr;
    ListNodePtr previousPtr;
    ListNodePtr currentPtr;

    newPtr = (ListNode *) malloc( sizeof( ListNode ) );
    char *s;
    s = (char *)malloc(sizeof(char)*80);

    if ( newPtr != NULL )
    {
        newPtr->id = item.id;
        strcpy(s,item.name);
        newPtr->name = s;
        newPtr->num = item.num;

        newPtr->nextPtr = NULL;

        previousPtr = NULL;
        currentPtr = *sPtr;


        while ( currentPtr != NULL && item.id > currentPtr->id )
        {
            previousPtr = currentPtr;
            currentPtr = currentPtr->nextPtr;
        }


        if ( previousPtr == NULL )
        {
            newPtr->nextPtr = *sPtr;
            *sPtr = newPtr;
        }
        else
        {
            previousPtr->nextPtr = newPtr;
            newPtr->nextPtr = currentPtr;
        }
    }
    else
    {
        printf( "%d not inserted. No memory available.\n", item.id );
    }
}


int del( ListNodePtr *sPtr, ListNode item )
{
    ListNodePtr previousPtr;
    ListNodePtr currentPtr;
    ListNodePtr tempPtr;


    if ( item.id == ( *sPtr )->id )
    {
        tempPtr = *sPtr;
        *sPtr = ( *sPtr )->nextPtr;
        free( tempPtr );
        return item.id;
    }
    else
    {
        previousPtr = *sPtr;
        currentPtr = ( *sPtr )->nextPtr;


        while ( currentPtr != NULL && currentPtr->id != item.id )
        {
            previousPtr = currentPtr;
            currentPtr = currentPtr->nextPtr;
        }


        if ( currentPtr != NULL )
        {
            tempPtr = currentPtr;
            previousPtr->nextPtr = currentPtr->nextPtr;
            free( tempPtr );
            return item.id;
        }
    }

    return '\0';
}


int isEmpty( ListNodePtr sPtr )
{
    return sPtr == NULL;
}


void printList( ListNodePtr currentPtr )
{


    if ( currentPtr == NULL )
    {
        printf( "List is empty.\n\n" );
    }
    else
    {
        printf( "The list is:\n\n" );

        while ( currentPtr != NULL )
        {
            printf( "ID: %d\n",currentPtr->id);
            printf("Name: ");
            printf("%s\n",currentPtr->name);
            printf ( "number: %d\n",currentPtr->num);

            currentPtr = currentPtr->nextPtr;
        }

        printf( "\nNULL\n\n" );
    }
}
